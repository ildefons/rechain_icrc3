type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArg = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   fee: opt nat;
   from_subaccount: opt blob;
   memo: opt blob;
   to: Account;
 };
type TransactionRange = record {transactions: vec Block;};
type Result = 
 variant {
   Err: TransferError;
   Ok: nat;
 };
type GetTransactionsResponse = 
 record {
   archived_transactions: vec ArchivedRange;
   first_index: nat;
   log_length: nat;
   transactions: vec Block;
 };
type GetBlocksRequest = 
 record {
   length: nat;
   start: nat;
 };
type BlockSchemaId = text;
type Block = 
 record {
   BlockSchemaId;
   blob;
 };
type ArchivedRange = 
 record {
   callback: func (GetBlocksRequest) -> (TransactionRange) query;
   length: nat;
   start: nat;
 };
type Action = 
 record {
   fee: opt nat;
   payload:
    variant {
      burn: record {
              amt: nat;
              to: vec blob;
            };
      mint: record {
              amt: nat;
              to: vec blob;
            };
      transfer: record {
                  amt: nat;
                  from: vec blob;
                  to: vec blob;
                };
      transfer_from: record {
                       amt: nat;
                       from: vec blob;
                       to: vec blob;
                     };
    };
   ts: nat;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : {
  add_record: (Action) -> (nat);
  batch_transfer: (vec TransferArg) -> (vec Result);
  get_transactions: (GetBlocksRequest) -> (GetTransactionsResponse) query;
  icrc1_balance_of: (Account) -> (nat) query;
  icrc1_transfer: (TransferArg) -> (Result);
}
