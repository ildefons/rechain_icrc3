import { Principal } from '@dfinity/principal';
export interface CreateInstanceRequest {
    nns?: boolean | {
        fromPath: string;
        subnetId: Principal;
    };
    sns?: boolean;
    ii?: boolean;
    fiduciary?: boolean;
    bitcoin?: boolean;
    system?: number;
    application?: number;
    processingTimeoutMs?: number;
}
export interface EncodedCreateInstanceRequest {
    nns?: 'New' | {
        FromPath: [
            string,
            {
                subnet_id: string;
            }
        ];
    };
    sns?: string;
    ii?: string;
    fiduciary?: string;
    bitcoin?: string;
    system: string[];
    application: string[];
}
export declare function encodeCreateInstanceRequest(req?: CreateInstanceRequest): EncodedCreateInstanceRequest;
export interface GetPubKeyRequest {
    subnetId: Principal;
}
export interface EncodedGetPubKeyRequest {
    subnet_id: string;
}
export declare function encodeGetPubKeyRequest(req: GetPubKeyRequest): EncodedGetPubKeyRequest;
export type InstanceTopology = Record<string, SubnetTopology>;
export interface SubnetTopology {
    id: Principal;
    type: SubnetType;
    size: number;
    canisterRanges: Array<{
        start: Principal;
        end: Principal;
    }>;
}
export declare enum SubnetType {
    Application = "Application",
    Bitcoin = "Bitcoin",
    Fiduciary = "Fiduciary",
    InternetIdentity = "II",
    NNS = "NNS",
    SNS = "SNS",
    System = "System"
}
export type EncodedInstanceTopology = Record<string, EncodedSubnetTopology>;
export interface EncodedSubnetTopology {
    subnet_kind: EncodedSubnetKind;
    size: number;
    canister_ranges: Array<{
        start: {
            canister_id: string;
        };
        end: {
            canister_id: string;
        };
    }>;
}
export type EncodedSubnetKind = 'Application' | 'Bitcoin' | 'Fiduciary' | 'II' | 'NNS' | 'SNS' | 'System';
export declare function decodeInstanceTopology(encoded: EncodedInstanceTopology): InstanceTopology;
export declare function decodeSubnetTopology(subnetId: string, encoded: EncodedSubnetTopology): SubnetTopology;
export declare function decodeSubnetKind(kind: EncodedSubnetKind): SubnetType;
export interface CreateInstanceSuccessResponse {
    Created: {
        instance_id: number;
        topology: EncodedInstanceTopology;
    };
}
export interface CreateInstanceErrorResponse {
    Error: {
        message: string;
    };
}
export type CreateInstanceResponse = CreateInstanceSuccessResponse | CreateInstanceErrorResponse;
export interface GetTimeResponse {
    millisSinceEpoch: number;
}
export interface EncodedGetTimeResponse {
    nanos_since_epoch: number;
}
export declare function decodeGetTimeResponse(res: EncodedGetTimeResponse): GetTimeResponse;
export interface SetTimeRequest {
    millisSinceEpoch: number;
}
export interface EncodedSetTimeRequest {
    nanos_since_epoch: number;
}
export declare function encodeSetTimeRequest(req: SetTimeRequest): EncodedSetTimeRequest;
export interface GetSubnetIdRequest {
    canisterId: Principal;
}
export interface EncodedGetSubnetIdRequest {
    canister_id: string;
}
export declare function encodeGetSubnetIdRequest(req: GetSubnetIdRequest): EncodedGetSubnetIdRequest;
export type GetSubnetIdResponse = {
    subnetId: Principal | null;
};
export type EncodedGetSubnetIdResponse = {
    subnet_id: string;
} | null;
export declare function decodeGetSubnetIdResponse(res: EncodedGetSubnetIdResponse): GetSubnetIdResponse;
export interface GetCyclesBalanceRequest {
    canisterId: Principal;
}
export interface EncodedGetCyclesBalanceRequest {
    canister_id: string;
}
export declare function encodeGetCyclesBalanceRequest(req: GetCyclesBalanceRequest): EncodedGetCyclesBalanceRequest;
export interface EncodedGetCyclesBalanceResponse {
    cycles: number;
}
export interface GetCyclesBalanceResponse {
    cycles: number;
}
export declare function decodeGetCyclesBalanceResponse(res: EncodedGetCyclesBalanceResponse): GetCyclesBalanceResponse;
export interface AddCyclesRequest {
    canisterId: Principal;
    amount: number;
}
export interface EncodedAddCyclesRequest {
    canister_id: string;
    amount: number;
}
export declare function encodeAddCyclesRequest(req: AddCyclesRequest): EncodedAddCyclesRequest;
export interface AddCyclesResponse {
    cycles: number;
}
export interface EncodedAddCyclesResponse {
    cycles: number;
}
export declare function decodeAddCyclesResponse(res: EncodedAddCyclesResponse): AddCyclesResponse;
export interface UploadBlobRequest {
    blob: Uint8Array;
}
export type EncodedUploadBlobRequest = Uint8Array;
export declare function encodeUploadBlobRequest(req: UploadBlobRequest): EncodedUploadBlobRequest;
export interface UploadBlobResponse {
    blobId: Uint8Array;
}
export type EncodedUploadBlobResponse = string;
export declare function decodeUploadBlobResponse(res: EncodedUploadBlobResponse): UploadBlobResponse;
export interface SetStableMemoryRequest {
    canisterId: Principal;
    blobId: Uint8Array;
}
export interface EncodedSetStableMemoryRequest {
    canister_id: string;
    blob_id: string;
}
export declare function encodeSetStableMemoryRequest(req: SetStableMemoryRequest): EncodedSetStableMemoryRequest;
export interface GetStableMemoryRequest {
    canisterId: Principal;
}
export interface EncodedGetStableMemoryRequest {
    canister_id: string;
}
export declare function encodeGetStableMemoryRequest(req: GetStableMemoryRequest): EncodedGetStableMemoryRequest;
export interface GetStableMemoryResponse {
    blob: Uint8Array;
}
export interface EncodedGetStableMemoryResponse {
    blob: string;
}
export declare function decodeGetStableMemoryResponse(res: EncodedGetStableMemoryResponse): GetStableMemoryResponse;
export interface CanisterCallRequest {
    sender: Principal;
    canisterId: Principal;
    method: string;
    payload: Uint8Array;
    effectivePrincipal?: EffectivePrincipal;
}
export type EffectivePrincipal = {
    subnetId: Principal;
} | {
    canisterId: Principal;
};
export interface EncodedCanisterCallRequest {
    sender: string;
    canister_id: string;
    method: string;
    payload: string;
    effective_principal?: EncodedEffectivePrincipal;
}
export type EncodedEffectivePrincipal = {
    SubnetId: string;
} | {
    CanisterId: string;
} | 'None';
export declare function encodeEffectivePrincipal(effectivePrincipal?: EffectivePrincipal): EncodedEffectivePrincipal;
export declare function encodeCanisterCallRequest(req: CanisterCallRequest): EncodedCanisterCallRequest;
export interface CanisterCallResponse {
    body: Uint8Array;
}
export interface EncodedCanisterCallSuccessResponse {
    Ok: {
        Reply: string;
    };
}
export interface EncodedCanisterCallRejectResponse {
    Ok: {
        Reject: string;
    };
}
export interface EncodedCanisterCallErrorResponse {
    Err: {
        code: string;
        description: string;
    };
}
export type EncodedCanisterCallResponse = EncodedCanisterCallSuccessResponse | EncodedCanisterCallRejectResponse | EncodedCanisterCallErrorResponse;
export declare function decodeCanisterCallResponse(res: EncodedCanisterCallResponse): CanisterCallResponse;
