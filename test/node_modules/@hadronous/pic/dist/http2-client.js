"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Http2Client = exports.JSON_HEADER = void 0;
const node_http2_1 = __importDefault(require("node:http2"));
const { HTTP2_HEADER_PATH, HTTP2_HEADER_METHOD } = node_http2_1.default.constants;
exports.JSON_HEADER = {
    'Content-Type': 'application/json',
};
class Http2Client {
    session;
    constructor(baseUrl) {
        this.session = node_http2_1.default.connect(baseUrl);
    }
    request(init) {
        return new Promise((resolve, reject) => {
            let req = this.session.request({
                [HTTP2_HEADER_PATH]: init.path,
                [HTTP2_HEADER_METHOD]: init.method,
                'content-length': init.body?.length ?? 0,
                ...init.headers,
            });
            req.on('error', error => {
                console.error('Erorr sending request to PocketIC server', error);
                return reject(error);
            });
            req.on('response', headers => {
                const status = headers[':status'] ?? -1;
                const contentLength = headers['content-length']
                    ? Number(headers['content-length'])
                    : 0;
                let buffer = Buffer.alloc(contentLength);
                let bufferLength = 0;
                req.on('data', (chunk) => {
                    chunk.copy(buffer, bufferLength);
                    bufferLength += chunk.length;
                });
                req.on('end', () => {
                    const body = buffer.toString('utf8');
                    return resolve({
                        status,
                        body,
                        headers,
                    });
                });
            });
            if (init.body) {
                req.write(init.body, 'utf8');
            }
            req.end();
        });
    }
    async jsonGet(init) {
        while (true) {
            const res = await this.request({
                method: 'GET',
                path: init.path,
                headers: { ...init.headers, ...exports.JSON_HEADER },
            });
            const resBody = JSON.parse(res.body);
            if (!resBody) {
                return resBody;
            }
            // server encountered an error
            if ('message' in resBody) {
                console.error('PocketIC server encountered an error', resBody.message);
                throw new Error(resBody.message);
            }
            // the server has started processing or is busy
            if ('state_label' in resBody) {
                console.error('PocketIC server is too busy to process the request');
                if (res.status === 202) {
                    throw new Error('Server started processing');
                }
                if (res.status === 409) {
                    throw new Error('Server busy');
                }
                throw new Error('Unknown state');
            }
            return resBody;
        }
    }
    async jsonPost(init) {
        const reqBody = init.body
            ? new TextEncoder().encode(JSON.stringify(init.body))
            : undefined;
        while (true) {
            const res = await this.request({
                method: 'POST',
                path: init.path,
                headers: { ...init.headers, ...exports.JSON_HEADER },
                body: reqBody,
            });
            const resBody = JSON.parse(res.body);
            if (!resBody) {
                return resBody;
            }
            // server encountered an error
            if ('message' in resBody) {
                console.error('PocketIC server encountered an error', resBody.message);
                throw new Error(resBody.message);
            }
            // the server has started processing or is busy
            // sleep and try again
            if ('state_label' in resBody) {
                console.error('PocketIC server is too busy to process the request');
                if (res.status === 202) {
                    throw new Error('Server started processing');
                }
                if (res.status === 409) {
                    throw new Error('Server busy');
                }
                throw new Error('Unknown state');
            }
            return resBody;
        }
    }
}
exports.Http2Client = Http2Client;
//# sourceMappingURL=http2-client.js.map