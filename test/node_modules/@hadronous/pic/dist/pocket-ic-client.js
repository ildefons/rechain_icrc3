"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PocketIcClient = void 0;
const http2_client_1 = require("./http2-client");
const pocket_ic_client_types_1 = require("./pocket-ic-client-types");
const PROCESSING_TIME_HEADER = 'processing-timeout-ms';
const PROCESSING_TIME_VALUE_MS = 300_000;
class PocketIcClient {
    serverClient;
    instancePath;
    topology;
    isInstanceDeleted = false;
    processingHeader;
    constructor(serverClient, instancePath, topology, processingTimeoutMs) {
        this.serverClient = serverClient;
        this.instancePath = instancePath;
        this.topology = topology;
        this.processingHeader = {
            [PROCESSING_TIME_HEADER]: processingTimeoutMs.toString(),
        };
    }
    static async create(url, req) {
        const serverClient = new http2_client_1.Http2Client(url);
        const res = await serverClient.jsonPost({
            path: '/instances',
            body: (0, pocket_ic_client_types_1.encodeCreateInstanceRequest)(req),
        });
        if ('Error' in res) {
            console.error('Error creating instance', res.Error.message);
            throw new Error(res.Error.message);
        }
        const topology = (0, pocket_ic_client_types_1.decodeInstanceTopology)(res.Created.topology);
        const instanceId = res.Created.instance_id;
        return new PocketIcClient(serverClient, `/instances/${instanceId}`, topology, req?.processingTimeoutMs ?? PROCESSING_TIME_VALUE_MS);
    }
    async deleteInstance() {
        this.assertInstanceNotDeleted();
        await this.serverClient.request({
            method: 'DELETE',
            path: this.instancePath,
        });
        this.isInstanceDeleted = true;
    }
    async tick() {
        this.assertInstanceNotDeleted();
        return await this.post('/update/tick');
    }
    async getPubKey(req) {
        this.assertInstanceNotDeleted();
        return await this.post('/read/pub_key', (0, pocket_ic_client_types_1.encodeGetPubKeyRequest)(req));
    }
    getTopology() {
        return this.topology;
    }
    async getTime() {
        this.assertInstanceNotDeleted();
        const res = await this.get('/read/get_time');
        return (0, pocket_ic_client_types_1.decodeGetTimeResponse)(res);
    }
    async setTime(req) {
        this.assertInstanceNotDeleted();
        await this.post('/update/set_time', (0, pocket_ic_client_types_1.encodeSetTimeRequest)(req));
    }
    async getSubnetId(req) {
        this.assertInstanceNotDeleted();
        const res = await this.post('/read/get_subnet', (0, pocket_ic_client_types_1.encodeGetSubnetIdRequest)(req));
        return (0, pocket_ic_client_types_1.decodeGetSubnetIdResponse)(res);
    }
    async getCyclesBalance(req) {
        this.assertInstanceNotDeleted();
        const res = await this.post('/read/get_cycles', (0, pocket_ic_client_types_1.encodeGetCyclesBalanceRequest)(req));
        return (0, pocket_ic_client_types_1.decodeGetCyclesBalanceResponse)(res);
    }
    async addCycles(req) {
        this.assertInstanceNotDeleted();
        const res = await this.post('/update/add_cycles', (0, pocket_ic_client_types_1.encodeAddCyclesRequest)(req));
        return (0, pocket_ic_client_types_1.decodeAddCyclesResponse)(res);
    }
    async uploadBlob(req) {
        this.assertInstanceNotDeleted();
        const res = await this.serverClient.request({
            method: 'POST',
            path: '/blobstore',
            body: (0, pocket_ic_client_types_1.encodeUploadBlobRequest)(req),
        });
        return (0, pocket_ic_client_types_1.decodeUploadBlobResponse)(res.body);
    }
    async setStableMemory(req) {
        this.assertInstanceNotDeleted();
        await this.serverClient.jsonPost({
            path: `${this.instancePath}/update/set_stable_memory`,
            headers: this.processingHeader,
            body: (0, pocket_ic_client_types_1.encodeSetStableMemoryRequest)(req),
        });
    }
    async getStableMemory(req) {
        this.assertInstanceNotDeleted();
        const res = await this.post('/read/get_stable_memory', (0, pocket_ic_client_types_1.encodeGetStableMemoryRequest)(req));
        return (0, pocket_ic_client_types_1.decodeGetStableMemoryResponse)(res);
    }
    async updateCall(req) {
        this.assertInstanceNotDeleted();
        return await this.canisterCall('/update/execute_ingress_message', req);
    }
    async queryCall(req) {
        this.assertInstanceNotDeleted();
        return await this.canisterCall('/read/query', req);
    }
    async canisterCall(endpoint, req) {
        const res = await this.post(endpoint, (0, pocket_ic_client_types_1.encodeCanisterCallRequest)(req));
        return (0, pocket_ic_client_types_1.decodeCanisterCallResponse)(res);
    }
    async post(endpoint, body) {
        return await this.serverClient.jsonPost({
            path: `${this.instancePath}${endpoint}`,
            headers: this.processingHeader,
            body,
        });
    }
    async get(endpoint) {
        return await this.serverClient.jsonGet({
            path: `${this.instancePath}${endpoint}`,
            headers: this.processingHeader,
        });
    }
    assertInstanceNotDeleted() {
        if (this.isInstanceDeleted) {
            throw new Error('Instance was deleted');
        }
    }
}
exports.PocketIcClient = PocketIcClient;
//# sourceMappingURL=pocket-ic-client.js.map